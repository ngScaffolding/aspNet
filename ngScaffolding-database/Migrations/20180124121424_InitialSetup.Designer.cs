// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ngScaffolding.database;
using System;

namespace ngScaffoldingdatabase.Migrations
{
    [DbContext(typeof(ngScaffoldingContext))]
    [Migration("20180124121424_InitialSetup")]
    partial class InitialSetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ngScaffolding.database.Models.ErrorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateRecorded");

                    b.Property<string>("Message");

                    b.Property<string>("Source")
                        .HasMaxLength(200);

                    b.Property<string>("StackTrace");

                    b.Property<string>("UserId")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("ngScaffolding.database.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Badge");

                    b.Property<string>("BadgeStyleClass");

                    b.Property<string>("Command");

                    b.Property<string>("Description");

                    b.Property<bool>("Disabled");

                    b.Property<bool>("Expanded");

                    b.Property<string>("Icon");

                    b.Property<int?>("ItemOrder");

                    b.Property<string>("JsonSerialized");

                    b.Property<string>("Label");

                    b.Property<int?>("ParentMenuItemId");

                    b.Property<string>("RouterLink");

                    b.Property<string>("RouterLinkActiveOptions");

                    b.Property<bool>("Separator");

                    b.Property<string>("Style");

                    b.Property<string>("StyleClass");

                    b.Property<string>("Target");

                    b.Property<string>("Url");

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuItemId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("ngScaffolding.database.Models.ReferenceValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Authorisation");

                    b.Property<int?>("CacheSeconds");

                    b.Property<string>("ConnectionName")
                        .HasMaxLength(50);

                    b.Property<string>("GroupName")
                        .HasMaxLength(100);

                    b.Property<string>("InputDetails");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasMaxLength(10);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ReferenceValues");
                });

            modelBuilder.Entity("ngScaffolding.database.Models.ReferenceValueItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Display")
                        .HasMaxLength(100);

                    b.Property<int?>("ItemOrder");

                    b.Property<int>("ReferenceValueId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<string>("SubTitle2")
                        .HasMaxLength(100);

                    b.Property<string>("Value")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("ReferenceValueId");

                    b.ToTable("ReferenceValueItems");
                });

            modelBuilder.Entity("ngScaffolding.Models.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("JsonContent");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("DataSources");
                });

            modelBuilder.Entity("ngScaffolding.models.Models.ApplicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("EndPoint");

                    b.Property<string>("HttpCommand");

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("LogType");

                    b.Property<string>("UserID");

                    b.Property<string>("Values");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLogs");
                });

            modelBuilder.Entity("ngScaffolding.models.Models.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InputDetails");

                    b.Property<string>("PreferenceName");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("ngScaffolding.models.Models.UserPreferenceValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PreferenceName");

                    b.Property<string>("UserName");

                    b.Property<int?>("UserPreferenceId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserPreferenceId");

                    b.ToTable("UserPreferenceValues");
                });

            modelBuilder.Entity("ngScaffolding.database.Models.MenuItem", b =>
                {
                    b.HasOne("ngScaffolding.database.Models.MenuItem", "ParentMenuItem")
                        .WithMany("Items")
                        .HasForeignKey("ParentMenuItemId");
                });

            modelBuilder.Entity("ngScaffolding.database.Models.ReferenceValueItem", b =>
                {
                    b.HasOne("ngScaffolding.database.Models.ReferenceValue", "ReferenceValue")
                        .WithMany("ReferenceValueItems")
                        .HasForeignKey("ReferenceValueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ngScaffolding.models.Models.UserPreferenceValue", b =>
                {
                    b.HasOne("ngScaffolding.models.Models.UserPreference", "UserPreference")
                        .WithMany()
                        .HasForeignKey("UserPreferenceId");
                });
#pragma warning restore 612, 618
        }
    }
}
